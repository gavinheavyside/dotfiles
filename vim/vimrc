filetype off
call pathogen#runtime_append_all_bundles()
filetype plugin indent on

set nocompatible


set clipboard=unnamed

" Security
set modelines=0

" Tabs/spaces
set tabstop=2
set softtabstop=2
set shiftwidth=2
set expandtab

" mouse in terminal
set mouse=a

" Basic options
set encoding=utf-8
set scrolloff=3
set autoindent
set showmode
set showcmd
set hidden
set wildmenu
set wildmode=list:longest
set visualbell
set cursorline
set ttyfast
set ruler
set backspace=indent,eol,start
set laststatus=2
set relativenumber
set undofile
set undodir=/tmp

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap//   " swap files
set backup                        " enable backups

" Leader
let mapleader = ","
let maplocalleader = "."

" Searching
nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set incsearch
set showmatch
set hlsearch
set gdefault
map <leader><space> :let @/=''<cr>
runtime macros/matchit.vim
nmap <tab> %
vmap <tab> %

" Soft/hard wrapping
set wrap
set textwidth=79
set formatoptions=qrn1
set colorcolumn=80

set list
set listchars=tab:.\ ,eol:Â¬
"set listchars=tab:.\ ,eol:$

" Color scheme (terminal)
syntax on
set background=dark
colorscheme solarized

"  Use Pathogen to load bundles
call pathogen#runtime_append_all_bundles()

" NERD Tree
map <F2> :NERDTreeToggle<cr>
let NERDTreeIgnore=['.vim$', '\~$', '.*\.pyc$', 'pip-log\.txt$']

set pastetoggle=<F2>

" Use the damn hjkl keys
"nnoremap <up> <nop>
"nnoremap <down> <nop>
"nnoremap <left> <nop>
"nnoremap <right> <nop>
"
" And make them fucking work, too.
"nnoremap j gj
"nnoremap k gk
"
" Easy buffer navigation
"map <C-h> <C-w>h
"map <C-j> <C-w>j
"map <C-k> <C-w>k
"map <C-l> <C-w>l
"map <leader>w <C-w>v<C-w>l

" Folding
"set foldlevelstart=0
"nnoremap <Space> za
"vnoremap <Space> za
"au BufNewFile,BufRead *.html map <leader>ft Vatzf

nnoremap <silent> <Space> :nohlsearch<Bar>:echo<CR>

function! MyFoldText()
  let line = getline(v:foldstart)

  let nucolwidth = &fdc + &number * &numberwidth
  let windowwidth = winwidth(0) - nucolwidth - 3
  let foldedlinecount = v:foldend - v:foldstart

  " expand tabs into spaces
  let onetab = strpart('          ', 0, &tabstop)
  let line = substitute(line, '\t', onetab, 'g')

  let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
  let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
  return line . '.' . repeat(" ",fillcharcount) . foldedlinecount . '.' . ' '
endfunction
set foldtext=MyFoldText()

" Fuck you, help key.
inoremap <F1> <ESC>:set invfullscreen<CR>a
nnoremap <F1> :set invfullscreen<CR>
vnoremap <F1> :set invfullscreen<CR>

" Various syntax stuff
au BufNewFile,BufRead *.less set filetype=less
au BufRead,BufNewFile *.scss set filetype=scss

au BufNewFile,BufRead *.m*down set filetype=markdown
au BufNewFile,BufRead *.m*down nnoremap <leader>1 yypVr=
au BufNewFile,BufRead *.m*down nnoremap <leader>2 yypVr-
au BufNewFile,BufRead *.m*down nnoremap <leader>3 I### <ESC>

" Clean whitespace
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" Ack
map <leader>a :Ack

" Formatting, TextMate-style
map <leader>q gqip

nmap <leader>m :make<cr>

" Easier linewise reselection
map <leader>v V`]

" Faster Esc
" inoremap <Esc> <nop>
inoremap jj <ESC>

" Rainbows!
nmap <leader>R :RainbowParenthesesToggle<CR>

" Shouldn't need shift
nnoremap ; :

if (&term == 'xterm' || &term =~? '^screen')
    "256 color --
    let &t_Co=256
    " restore screen after quitting
    set t_ti=ESC7ESC[rESC[?47h t_te=ESC[?47lESC8
    if has("terminfo")
        let &t_Sf="\ESC[3%p1%dm"
        let &t_Sb="\ESC[4%p1%dm"
    else
        let &t_Sf="\ESC[3%dm"
        let &t_Sb="\ESC[4%dm"
    endif
endif


nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>e <C-w>s<C-w>j

nnoremap <leader><leader> <C-^>

if has("macunix")
  " Save when losing focus
  au FocusLost * :wa

  set fuopt=maxvert,maxhorz
"  set guifont=DejaVu\ Sans\ Mono:h14
  set guifont=Inconsolata:h14
  "  let vimclojure#WantNailgun = 1 
  "  let vimclojure#NailgunClient = "/Users/gavin/.vim/bundle/vimclojure-2.2.0/lib/nailgun/ng"
else
  set guifont=Inconsolata\ 12
endif

set antialias
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>


function! SetRspec1()
  let t:st_rspec_command="spec"
endfunction

function! SetRspec2()
  let t:st_rspec_command="rspec"
endfunction

function! RunTests(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo
  if !exists("t:st_rspec_command")
    call SetRspec2()
  endif
  exec ":!" . t:st_rspec_command . " " . a:filename
endfunction

function! SetTestFile()
  " Set the spec file that tests will be run for.
  let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file.
  let in_spec_file = match(expand("%"), '_spec.rb$') != -1
  if in_spec_file
    call SetTestFile()
  elseif !exists("t:grb_test_file")
    return
  end
  call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
  let spec_line_number = line('.')
  call RunTestFile(":" . spec_line_number)
endfunction

" Run this file
map <leader>t :call RunTestFile()<cr>
" Run only the example under the cursor
map <leader>T :call RunNearestTest()<cr>
" Run all test files
map <leader>a :call RunTests('spec')<cr>

command! Rspec1 :call SetRspec1()
command! Rspec2 :call SetRspec2()

function! SetCucumberFile()
  " Set the spec file that tests will be run for.
  let t:st_cucumber_file=@%
endfunction

function! RunCucumbers(filename)
  " Write the file and run tests for the given filename
  :w
  :silent !echo;echo;echo;echo;echo
  exec ":!" . "cucumber" . " " . a:filename . " -f pretty"
endfunction

function! RunCucumberFile(...)
  if a:0
    let command_suffix = a:1
  else
    let command_suffix = ""
  endif

  " Run the tests for the previously-marked file.
  let in_cucumber_file = match(expand("%"), '.feature$') != -1
  if in_cucumber_file
    call SetCucumberFile()
  elseif !exists("t:st_cucumber_file")
    return
  end
  call RunCucumbers(t:st_cucumber_file . command_suffix)
endfunction

function! RunNearestCucumber()
  let feature_line_number = line('.')
  call RunCucumberFile(":" . feature_line_number)
endfunction

" Run this file
map <leader>c :call RunCucumberFile()<cr>
" Run only the example under the cursor
map <leader>C :call RunNearestCucumber()<cr>

